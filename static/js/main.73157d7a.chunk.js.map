{"version":3,"sources":["lib/messageTypes.ts","components/sidebar.tsx","components/map.tsx","components/magSelector.tsx","components/showFeatures.tsx","components/showFeature.tsx","App.tsx","serviceWorker.ts","lib/http.ts","index.tsx"],"names":["messageTypes","mode","pointStyle","Style","image","CircleStyle","radius","fill","Fill","color","MapComponent","map","features","tokens","source","geoJson","subscribe","messageType","func","push","PubSub","filterByMag","_","message","clear","mag","filteredFeatures","filter","x","Math","floor","get","addFeatures","getView","setCenter","getExtent","showAllFeatures","setZoom","showSingleFeature","feature","console","log","f","find","properties","code","Feature","addFeature","dataLoaded","GeoJSON","dataProjection","featureProjection","readFeatures","VectorSource","vectorLayer","VectorLayer","style","styleFunction","addLayer","this","configureMap","configureSubscriptions","forEach","unsubscribe","Map","layers","TileLayer","OSM","target","view","View","center","zoom","on","event","forEachFeatureAtPixel","pixel","length","thisId","originalFeature","publish","id","width","height","React","Component","MagSelector","handleSelectMag","renderMag","value","count","props","key","onClick","bind","href","float","className","magRange","maxMag","max","values","i","ShowFeatures","handleClickFeature","handleShowAll","renderFeature","index","paddingBottom","place","title","ShowFeature","Date","time","toLocaleDateString","toLocaleTimeString","colSpan","url","Sidebar","setState","showMag","showAll","showFeature","loading","state","marginTop","App","position","top","left","overflow","padding","Boolean","window","location","hostname","match","method","body","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","JSON","parse","responseText","e","onerror","send","stringify","undefined","then","data","catch","getGeojson","geojson","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73157d7a.chunk.js","sourcesContent":["export enum messageTypes {\n  'dataLoaded',\n  'filterByMag',\n  'showAllFeatures',\n  'showSingleFeature'\n}","import React from 'react'\nimport { messageTypes } from '../lib/messageTypes'\nimport PubSub from 'pubsub-js'\nimport MagSelector from './magSelector'\nimport ShowFeatures from './showFeatures'\nimport ShowFeature from './showFeature'\n\nenum mode {\n  'showAll',\n  'showMag',\n  'showFeature'\n}\n\ntype IState = {\n  geoJson: any\n  loading: boolean\n  mode: mode\n  mag: number\n  feature: any\n}\n\nclass Sidebar extends React.Component<{}, IState> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      geoJson: {},\n      loading: true,\n      mode: mode.showAll,\n      mag: 0,\n      feature: {}\n    }\n  }\n\n  tokens: any[] = []\n\n  componentDidMount() {\n    this.configureSubscriptions()\n  }\n\n  componentWillUnmount() {\n    this.tokens.forEach(PubSub.unsubscribe)\n  }\n\n  configureSubscriptions() {\n    this.subscribe(messageTypes.dataLoaded, this.dataLoaded);\n    this.subscribe(messageTypes.filterByMag, this.filterByMag);\n    this.subscribe(messageTypes.showAllFeatures, this.showAllFeatures)\n    this.subscribe(messageTypes.showSingleFeature, this.showFeature)\n  }\n\n  subscribe = (messageType: messageTypes, func: Function) => {\n    this.tokens.push(PubSub.subscribe(messageType, func))\n  }\n\n  filterByMag = (_: any, message: any) => {\n    const { mag } = message\n    this.setState({ mag, mode: mode.showMag })\n  }\n\n  showAllFeatures = () => this.setState({ mode: mode.showAll })\n\n  showFeature = (_: any, feature: any) => this.setState({ mode: mode.showFeature, feature })\n\n  dataLoaded = (_: any, geoJson: any) => {\n    this.setState({ geoJson, loading: false, mode: mode.showAll })\n  }\n\n  render() {\n    if (this.state.loading) return <>Loading...</>\n    return <div>\n      <h3 style={{ marginTop: 0 }}>{this.state.geoJson.features.length} Earthquakes</h3>\n      {this.state.mode === mode.showAll && <MagSelector geoJson={this.state.geoJson} />}\n      {this.state.mode === mode.showMag && <ShowFeatures title={`Magnitude ${this.state.mag} - ${this.state.mag + 1}`} features={this.state.geoJson.features.filter((x: any) => Math.floor(x.properties.mag) === this.state.mag)} />}\n      {this.state.mode === mode.showFeature && <ShowFeature feature={this.state.feature} />}\n    </div>\n  }\n}\n\nexport default Sidebar","import React from 'react'\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { messageTypes } from '../lib/messageTypes';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Circle as CircleStyle, Fill, Style } from 'ol/style';\nimport PubSub from 'pubsub-js'\nimport { Feature } from 'ol';\n\nconst pointStyle = new Style({\n  image: new CircleStyle({\n    radius: 8,\n    fill: new Fill({ color: '#0D47A1' }),\n  })\n})\n\nclass MapComponent extends React.Component {\n\n  map?: Map\n  features: Feature[] = []\n  tokens: any[] = []\n  source?: VectorSource\n  geoJson: any\n\n  componentDidMount() {\n    this.configureMap()\n    this.configureSubscriptions()\n  }\n\n  componentWillUnmount() {\n    this.tokens.forEach(PubSub.unsubscribe)\n  }\n\n  configureMap() {\n    this.map = new Map({\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        })\n      ],\n      target: 'map',\n      view: new View({\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n\n    this.map.on('click', event => {\n      const features: any[] = []\n      this.map?.forEachFeatureAtPixel(event.pixel, feature => {\n        features.push(feature)\n      })\n      if (features.length > 0) {\n        const thisId = features[0].get('code')\n        const originalFeature = this.geoJson.features.find((x: any) => x.properties.code === thisId)\n        PubSub.publish(messageTypes.showSingleFeature, originalFeature)\n      }\n    })\n  }\n\n  subscribe = (messageType: messageTypes, func: Function) => {\n    this.tokens.push(PubSub.subscribe(messageType, func))\n  }\n\n  configureSubscriptions() {\n    this.subscribe(messageTypes.dataLoaded, this.dataLoaded)\n    this.subscribe(messageTypes.filterByMag, this.filterByMag)\n    this.subscribe(messageTypes.showAllFeatures, this.showAllFeatures)\n    this.subscribe(messageTypes.showSingleFeature, this.showSingleFeature)\n  }\n\n  filterByMag = (_: any, message: any) => {\n    this.source?.clear()\n    const { mag } = message\n    const filteredFeatures = this.features.filter(x => Math.floor(x.get('mag')) === mag)\n    this.source?.addFeatures(filteredFeatures)\n    this.map?.getView().setCenter(this.source?.getExtent())\n  }\n\n  showAllFeatures = () => {\n    this.source?.clear()\n    this.source?.addFeatures(this.features)\n\n    this.map?.getView().setZoom(2)\n  }\n\n  showSingleFeature = (_:any, feature: any) => {\n    console.log(feature)\n    this.source?.clear()\n    const f = this.features.find(x => x.get('code') === feature.properties.code) ?? new Feature()\n    if (f) this.source?.addFeature(f)\n\n    this.map?.getView().setCenter(this.source?.getExtent())\n    this.map?.getView().setZoom(10)\n  }\n\n  dataLoaded = (_: any, geoJson: any) => {\n    this.geoJson = geoJson\n    this.features = new GeoJSON({ dataProjection: 'EPSG:4326', featureProjection: 'EPSG:3857' }).readFeatures(geoJson)\n    this.source = new VectorSource({\n      features: this.features\n    });\n\n    var vectorLayer = new VectorLayer({\n      source: this.source,\n      style: this.styleFunction\n    });\n\n    this.map?.addLayer(vectorLayer)\n  }\n\n  styleFunction = () => pointStyle\n\n  render() {\n    return <div id=\"map\" style={{ width: '100%', height: '100%' }} />\n  }\n\n}\n\nexport default MapComponent","import React from 'react'\nimport PubSub from 'pubsub-js'\nimport { messageTypes } from '../lib/messageTypes'\n\ntype IProps = {\n  geoJson: any\n}\n\nclass MagSelector extends React.Component<IProps> {\n\n  handleSelectMag = (mag: number) => {\n    PubSub.publish(messageTypes.filterByMag, { mag })\n  }\n\n  renderMag = (value: number) => {\n    const count = this.props.geoJson.features.filter((x: any) => Math.floor(x.properties.mag) === value).length\n    return <tr key={value}>\n      <td>\n        <a onClick={this.handleSelectMag.bind(null, value)} href=\"javascript:void(0);\">Mag {value} to {value + 1}</a>\n      </td>\n      <td>\n        <span style={{ float: 'right' }} className=\"ui label\">{count}</span>\n      </td>\n    </tr>\n  }\n\n  render() {\n    const magRange = this.props.geoJson.features\n      .map((x: any) => x.properties.mag)\n      .map((x: any) => Math.floor(x))\n\n    const maxMag = Math.max(...magRange)\n\n    const values: number[] = []\n    for (let i = 0; i <= maxMag; i++) {\n      values.push(i)\n    }\n\n    return <>\n      <h5>By Magnitude</h5>\n      <table className=\"ui table\">\n        <tbody>\n          {values.map(this.renderMag)}\n        </tbody>\n      </table>\n    </>\n  }\n}\n\nexport default MagSelector\n","import React from 'react'\nimport { Feature } from 'ol'\nimport PubSub from 'pubsub-js'\nimport { messageTypes } from '../lib/messageTypes'\n\ntype IProps = {\n  features: Feature[]\n  title: string\n}\n\nclass ShowFeatures extends React.Component<IProps> {\n\n  handleClickFeature = (feature: any) => PubSub.publish(messageTypes.showSingleFeature, feature)\n\n  handleShowAll = () => PubSub.publish(messageTypes.showAllFeatures, {})\n\n  renderFeature = (feature: any, index: number) => {\n    return <tr key={index} style={{ paddingBottom: 8 }}>\n      <td>\n        <div><a href=\"javascript:void(0);\" onClick={this.handleClickFeature.bind(null, feature)}>{feature.properties.place}</a></div>\n        <small>Mag {feature.properties.mag}</small>\n      </td>\n    </tr>\n  }\n\n  render() {\n    return <>\n      <div style={{ paddingBottom: 12 }}><a href=\"javascript:void(0);\" onClick={this.handleShowAll} >Show All</a></div>\n      <h5>{this.props.title}</h5>\n      <table className=\"ui table\">\n        <tbody>{this.props.features.map(this.renderFeature)}</tbody>\n      </table>\n    </>\n  }\n}\n\nexport default ShowFeatures\n","import React from 'react'\nimport PubSub from 'pubsub-js'\nimport { messageTypes } from '../lib/messageTypes'\n\ntype IProps = {\n  feature: any\n}\n\nclass ShowFeature extends React.Component<IProps> {\n\n  handleShowAll = () => PubSub.publish(messageTypes.showAllFeatures, {})\n\n\n  render() {\n    const { feature } = this.props\n    return <>\n      <div style={{ paddingBottom: 12 }}><a href=\"javascript:void(0);\" onClick={this.handleShowAll} >Show All</a></div>\n      <h5>{feature.properties.title}</h5>\n      <table className=\"ui table\">\n        <tbody>\n          <tr>\n            <td className=\"label\">Magnitude</td>\n            <td>{feature.properties.mag}</td>\n          </tr>\n          <tr>\n            <td className=\"label\">Time</td>\n            <td>{new Date(feature.properties.time).toLocaleDateString()} {new Date(feature.properties.time).toLocaleTimeString()}</td>\n          </tr>\n          <tr>\n            <td className=\"label\">Location</td>\n            <td>{feature.properties.place}</td>\n          </tr>\n          <tr>\n            <td colSpan={2}><a href={feature.properties.url} target=\"_blank\">More Information</a></td>\n          </tr>\n        </tbody>\n      </table>\n\n    </>\n  }\n}\n\nexport default ShowFeature\n","import React from 'react'\nimport Map from './components/map'\nimport Sidebar from './components/sidebar'\n\nconst sidebarWidth = 300\n\nconst App: React.FC = () => {\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, width: sidebarWidth, height: '100vh', overflow: 'auto' }}>\n        <div style={{ padding: 8 }}><Sidebar /></div>\n      </div>\n      <div style={{ position: 'absolute', top: 0, left: sidebarWidth, width: `calc(100vw - ${sidebarWidth}px)`, height: '100vh' }}>\n        <Map />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const send = (method: string, url: string, body?: any) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(method, url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.setRequestHeader('Accept', 'application/json')\n\n    xhr.onload = () => {\n      try {\n        if (xhr.status >= 400) return reject(xhr.status)\n        resolve(JSON.parse(xhr.responseText || 'null'))\n      } catch (e) {\n        reject(e)\n      }\n    }\n\n    xhr.onerror = reject\n\n    xhr.send(body ? JSON.stringify(body) : undefined)\n  })\n}\n\nconst get = (url: string) => send('GET', url)\n\nfunction getT<T>(url: string): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    get(url)\n      .then(data => resolve(data as T))\n      .catch(reject)\n  })\n}\n\nexport const getGeojson = (): Promise<any> =>\n  getT<any>('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson')","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { getGeojson } from './lib/http'\nimport PubSub from 'pubsub-js'\nimport { messageTypes } from './lib/messageTypes';\n\ngetGeojson().then(geojson => {\n  PubSub.publish(messageTypes.dataLoaded, geojson)\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}