{"version":3,"sources":["lib/messageTypes.ts","components/sidebar.tsx","components/map.tsx","components/magSelector.tsx","components/showFeatures.tsx","components/showFeature.tsx","App.tsx","serviceWorker.ts","lib/http.ts","index.tsx"],"names":["messageTypes","mode","pointStyle","Style","image","CircleStyle","radius","fill","Fill","color","MapComponent","map","features","tokens","source","geoJson","subscribe","messageType","func","push","PubSub","filterByMag","_","message","clear","mag","filteredFeatures","filter","x","Math","floor","get","addFeatures","getView","setCenter","getExtent","showAllFeatures","setZoom","showSingleFeature","feature","console","log","f","find","properties","code","Feature","addFeature","dataLoaded","GeoJSON","dataProjection","featureProjection","readFeatures","VectorSource","vectorLayer","VectorLayer","style","styleFunction","addLayer","this","configureMap","configureSubscriptions","forEach","unsubscribe","Map","layers","TileLayer","OSM","target","view","View","center","zoom","on","event","forEachFeatureAtPixel","pixel","length","thisId","originalFeature","publish","id","width","height","React","Component","MagSelector","handleSelectMag","renderMag","value","count","props","key","className","onClick","bind","float","magRange","maxMag","max","values","i","ShowFeatures","handleClickFeature","handleShowAll","renderFeature","index","paddingBottom","place","title","ShowFeature","Date","time","toLocaleDateString","toLocaleTimeString","colSpan","href","url","rel","Sidebar","setState","showMag","showAll","showFeature","loading","state","marginTop","App","position","top","left","overflow","padding","Boolean","window","location","hostname","match","method","body","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","JSON","parse","responseText","e","onerror","send","stringify","undefined","then","data","catch","getGeojson","geojson","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.950c8065.chunk.js","sourcesContent":["export enum messageTypes {\r\n  'dataLoaded',\r\n  'filterByMag',\r\n  'showAllFeatures',\r\n  'showSingleFeature'\r\n}","import React from 'react'\r\nimport { messageTypes } from '../lib/messageTypes'\r\nimport PubSub from 'pubsub-js'\r\nimport MagSelector from './magSelector'\r\nimport ShowFeatures from './showFeatures'\r\nimport ShowFeature from './showFeature'\r\n\r\nenum mode {\r\n  'showAll',\r\n  'showMag',\r\n  'showFeature'\r\n}\r\n\r\ntype IState = {\r\n  geoJson: any\r\n  loading: boolean\r\n  mode: mode\r\n  mag: number\r\n  feature: any\r\n}\r\n\r\nclass Sidebar extends React.Component<{}, IState> {\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      geoJson: {},\r\n      loading: true,\r\n      mode: mode.showAll,\r\n      mag: 0,\r\n      feature: {}\r\n    }\r\n  }\r\n\r\n  tokens: any[] = []\r\n\r\n  componentDidMount() {\r\n    this.configureSubscriptions()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.tokens.forEach(PubSub.unsubscribe)\r\n  }\r\n\r\n  configureSubscriptions() {\r\n    this.subscribe(messageTypes.dataLoaded, this.dataLoaded);\r\n    this.subscribe(messageTypes.filterByMag, this.filterByMag);\r\n    this.subscribe(messageTypes.showAllFeatures, this.showAllFeatures)\r\n    this.subscribe(messageTypes.showSingleFeature, this.showFeature)\r\n  }\r\n\r\n  subscribe = (messageType: messageTypes, func: Function) => {\r\n    this.tokens.push(PubSub.subscribe(messageType, func))\r\n  }\r\n\r\n  filterByMag = (_: any, message: any) => {\r\n    const { mag } = message\r\n    this.setState({ mag, mode: mode.showMag })\r\n  }\r\n\r\n  showAllFeatures = () => this.setState({ mode: mode.showAll })\r\n\r\n  showFeature = (_: any, feature: any) => this.setState({ mode: mode.showFeature, feature })\r\n\r\n  dataLoaded = (_: any, geoJson: any) => {\r\n    this.setState({ geoJson, loading: false, mode: mode.showAll })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) return <>Loading...</>\r\n    return <div>\r\n      <h3 style={{ marginTop: 0 }}>{this.state.geoJson.features.length} Earthquakes</h3>\r\n      {this.state.mode === mode.showAll && <MagSelector geoJson={this.state.geoJson} />}\r\n      {this.state.mode === mode.showMag && <ShowFeatures title={`Magnitude ${this.state.mag} - ${this.state.mag + 1}`} features={this.state.geoJson.features.filter((x: any) => Math.floor(x.properties.mag) === this.state.mag)} />}\r\n      {this.state.mode === mode.showFeature && <ShowFeature feature={this.state.feature} />}\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\nimport 'ol/ol.css';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { messageTypes } from '../lib/messageTypes';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { OSM, Vector as VectorSource } from 'ol/source';\r\nimport { Circle as CircleStyle, Fill, Style } from 'ol/style';\r\nimport PubSub from 'pubsub-js'\r\nimport { Feature } from 'ol';\r\n\r\nconst pointStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 8,\r\n    fill: new Fill({ color: '#0D47A1' }),\r\n  })\r\n})\r\n\r\nclass MapComponent extends React.Component {\r\n\r\n  map?: Map\r\n  features: Feature[] = []\r\n  tokens: any[] = []\r\n  source?: VectorSource\r\n  geoJson: any\r\n\r\n  componentDidMount() {\r\n    this.configureMap()\r\n    this.configureSubscriptions()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.tokens.forEach(PubSub.unsubscribe)\r\n  }\r\n\r\n  configureMap() {\r\n    this.map = new Map({\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        })\r\n      ],\r\n      target: 'map',\r\n      view: new View({\r\n        center: [0, 0],\r\n        zoom: 2\r\n      })\r\n    });\r\n\r\n    this.map.on('click', event => {\r\n      const features: any[] = []\r\n      this.map?.forEachFeatureAtPixel(event.pixel, feature => {\r\n        features.push(feature)\r\n      })\r\n      if (features.length > 0) {\r\n        const thisId = features[0].get('code')\r\n        const originalFeature = this.geoJson.features.find((x: any) => x.properties.code === thisId)\r\n        PubSub.publish(messageTypes.showSingleFeature, originalFeature)\r\n      }\r\n    })\r\n  }\r\n\r\n  subscribe = (messageType: messageTypes, func: Function) => {\r\n    this.tokens.push(PubSub.subscribe(messageType, func))\r\n  }\r\n\r\n  configureSubscriptions() {\r\n    this.subscribe(messageTypes.dataLoaded, this.dataLoaded)\r\n    this.subscribe(messageTypes.filterByMag, this.filterByMag)\r\n    this.subscribe(messageTypes.showAllFeatures, this.showAllFeatures)\r\n    this.subscribe(messageTypes.showSingleFeature, this.showSingleFeature)\r\n  }\r\n\r\n  filterByMag = (_: any, message: any) => {\r\n    this.source?.clear()\r\n    const { mag } = message\r\n    const filteredFeatures = this.features.filter(x => Math.floor(x.get('mag')) === mag)\r\n    this.source?.addFeatures(filteredFeatures)\r\n    this.map?.getView().setCenter(this.source?.getExtent())\r\n  }\r\n\r\n  showAllFeatures = () => {\r\n    this.source?.clear()\r\n    this.source?.addFeatures(this.features)\r\n\r\n    this.map?.getView().setZoom(2)\r\n  }\r\n\r\n  showSingleFeature = (_:any, feature: any) => {\r\n    console.log(feature)\r\n    this.source?.clear()\r\n    const f = this.features.find(x => x.get('code') === feature.properties.code) ?? new Feature()\r\n    if (f) this.source?.addFeature(f)\r\n\r\n    this.map?.getView().setCenter(this.source?.getExtent())\r\n    this.map?.getView().setZoom(10)\r\n  }\r\n\r\n  dataLoaded = (_: any, geoJson: any) => {\r\n    this.geoJson = geoJson\r\n    this.features = new GeoJSON({ dataProjection: 'EPSG:4326', featureProjection: 'EPSG:3857' }).readFeatures(geoJson)\r\n    this.source = new VectorSource({\r\n      features: this.features\r\n    });\r\n\r\n    var vectorLayer = new VectorLayer({\r\n      source: this.source,\r\n      style: this.styleFunction\r\n    });\r\n\r\n    this.map?.addLayer(vectorLayer)\r\n  }\r\n\r\n  styleFunction = () => pointStyle\r\n\r\n  render() {\r\n    return <div id=\"map\" style={{ width: '100%', height: '100%' }} />\r\n  }\r\n\r\n}\r\n\r\nexport default MapComponent","import React from 'react'\r\nimport PubSub from 'pubsub-js'\r\nimport { messageTypes } from '../lib/messageTypes'\r\n\r\ntype IProps = {\r\n  geoJson: any\r\n}\r\n\r\nclass MagSelector extends React.Component<IProps> {\r\n\r\n  handleSelectMag = (mag: number) => {\r\n    PubSub.publish(messageTypes.filterByMag, { mag })\r\n  }\r\n\r\n  renderMag = (value: number) => {\r\n    const count = this.props.geoJson.features.filter((x: any) => Math.floor(x.properties.mag) === value).length\r\n    return <tr key={value}>\r\n      <td>\r\n        <button className=\"link-button\" onClick={this.handleSelectMag.bind(null, value)}>Mag {value} to {value + 1}</button>\r\n      </td>\r\n      <td>\r\n        <span style={{ float: 'right' }} className=\"ui label\">{count}</span>\r\n      </td>\r\n    </tr>\r\n  }\r\n\r\n  render() {\r\n    const magRange = this.props.geoJson.features\r\n      .map((x: any) => x.properties.mag)\r\n      .map((x: any) => Math.floor(x))\r\n\r\n    const maxMag = Math.max(...magRange)\r\n\r\n    const values: number[] = []\r\n    for (let i = 0; i <= maxMag; i++) {\r\n      values.push(i)\r\n    }\r\n\r\n    return <>\r\n      <h5>By Magnitude</h5>\r\n      <table className=\"ui table\">\r\n        <tbody>\r\n          {values.map(this.renderMag)}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  }\r\n}\r\n\r\nexport default MagSelector\r\n","import React from 'react'\r\nimport { Feature } from 'ol'\r\nimport PubSub from 'pubsub-js'\r\nimport { messageTypes } from '../lib/messageTypes'\r\n\r\ntype IProps = {\r\n  features: Feature[]\r\n  title: string\r\n}\r\n\r\nclass ShowFeatures extends React.Component<IProps> {\r\n\r\n  handleClickFeature = (feature: any) => PubSub.publish(messageTypes.showSingleFeature, feature)\r\n\r\n  handleShowAll = () => PubSub.publish(messageTypes.showAllFeatures, {})\r\n\r\n  renderFeature = (feature: any, index: number) => {\r\n    return <tr key={index} style={{ paddingBottom: 8 }}>\r\n      <td>\r\n        <div><button className=\"link-button\" onClick={this.handleClickFeature.bind(null, feature)}>{feature.properties.place}</button></div>\r\n        <small>Mag {feature.properties.mag}</small>\r\n      </td>\r\n    </tr>\r\n  }\r\n\r\n  render() {\r\n    return <>\r\n      <div style={{ paddingBottom: 12 }}><button className=\"link-button\" onClick={this.handleShowAll} >Show All</button></div>\r\n      <h5>{this.props.title}</h5>\r\n      <table className=\"ui table\">\r\n        <tbody>{this.props.features.map(this.renderFeature)}</tbody>\r\n      </table>\r\n    </>\r\n  }\r\n}\r\n\r\nexport default ShowFeatures\r\n","import React from 'react'\r\nimport PubSub from 'pubsub-js'\r\nimport { messageTypes } from '../lib/messageTypes'\r\n\r\ntype IProps = {\r\n  feature: any\r\n}\r\n\r\nclass ShowFeature extends React.Component<IProps> {\r\n\r\n  handleShowAll = () => PubSub.publish(messageTypes.showAllFeatures, {})\r\n\r\n\r\n  render() {\r\n    const { feature } = this.props\r\n    return <>\r\n      <div style={{ paddingBottom: 12 }}><button className=\"link-button\" onClick={this.handleShowAll} >Show All</button></div>\r\n      <h5>{feature.properties.title}</h5>\r\n      <table className=\"ui table\">\r\n        <tbody>\r\n          <tr>\r\n            <td className=\"label\">Magnitude</td>\r\n            <td>{feature.properties.mag}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"label\">Time</td>\r\n            <td>{new Date(feature.properties.time).toLocaleDateString()} {new Date(feature.properties.time).toLocaleTimeString()}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"label\">Location</td>\r\n            <td>{feature.properties.place}</td>\r\n          </tr>\r\n          <tr>\r\n            <td colSpan={2}><a href={feature.properties.url} target=\"_blank\" rel=\"noopener noreferrer\">More Information</a></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n    </>\r\n  }\r\n}\r\n\r\nexport default ShowFeature\r\n","import React from 'react'\r\nimport Map from './components/map'\r\nimport Sidebar from './components/sidebar'\r\n\r\nconst sidebarWidth = 300\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <>\r\n      <div style={{ position: 'absolute', top: 0, left: 0, width: sidebarWidth, height: '100vh', overflow: 'auto' }}>\r\n        <div style={{ padding: 8 }}><Sidebar /></div>\r\n      </div>\r\n      <div style={{ position: 'absolute', top: 0, left: sidebarWidth, width: `calc(100vw - ${sidebarWidth}px)`, height: '100vh' }}>\r\n        <Map />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const send = (method: string, url: string, body?: any) => {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest()\r\n\r\n    xhr.open(method, url, true)\r\n    xhr.setRequestHeader('Content-Type', 'application/json')\r\n    xhr.setRequestHeader('Accept', 'application/json')\r\n\r\n    xhr.onload = () => {\r\n      try {\r\n        if (xhr.status >= 400) return reject(xhr.status)\r\n        resolve(JSON.parse(xhr.responseText || 'null'))\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    }\r\n\r\n    xhr.onerror = reject\r\n\r\n    xhr.send(body ? JSON.stringify(body) : undefined)\r\n  })\r\n}\r\n\r\nconst get = (url: string) => send('GET', url)\r\n\r\nfunction getT<T>(url: string): Promise<T> {\r\n  return new Promise<T>((resolve, reject) => {\r\n    get(url)\r\n      .then(data => resolve(data as T))\r\n      .catch(reject)\r\n  })\r\n}\r\n\r\nexport const getGeojson = (): Promise<any> =>\r\n  getT<any>('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson')","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { getGeojson } from './lib/http'\r\nimport PubSub from 'pubsub-js'\r\nimport { messageTypes } from './lib/messageTypes';\r\n\r\ngetGeojson().then(geojson => {\r\n  PubSub.publish(messageTypes.dataLoaded, geojson)\r\n});\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}